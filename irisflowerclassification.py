# -*- coding: utf-8 -*-
"""IrisFlowerClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lvnjdp1i_JJjeGZbuQqhKyEUAYip8-8A

# Iris Flower Classification

## Problem Description

The **Iris flower dataset** is one of the most famous datasets in machine learning, often used for classification problems. It consists of data for **three species of iris flowers**: Setosa, Versicolor, and Virginica. The dataset contains **150 samples** with **four features** for each sample:

- **Sepal length**
- **Sepal width**
- **Petal length**
- **Petal width**

### Goal:
The goal is to build a machine learning model that can **classify iris flowers** into one of the three species based on the four features. The model should be trained using the dataset and then evaluated using various performance metrics.

### Dataset Details:
- **Number of Instances**: 150
- **Number of Features**: 4
- **Class Labels**: 3 (Setosa, Versicolor, Virginica)

### Features:
- **Sepal length**: The length of the sepal (in centimeters).
- **Sepal width**: The width of the sepal (in centimeters).
- **Petal length**: The length of the petal (in centimeters).
- **Petal width**: The width of the petal (in centimeters).

### Classes:
- **Setosa**: One species of iris.
- **Versicolor**: Another species of iris.
- **Virginica**: The third species of iris.

## Model Description

In this project, we use the **Random Forest Classifier** to classify the Iris flowers based on their features. The model is trained and evaluated on a hold-out test set. Various visualizations like **Pairplot**, **Feature Importance**, and **Confusion Matrix** are used to analyze the data and model performance.

---

## Steps Involved:
1. **Data Preprocessing**: Load and explore the Iris dataset.
2. **Model Training**: Train a Random Forest Classifier on the training set.
3. **Model Evaluation**: Evaluate the model using accuracy and other performance metrics.
4. **Visualizations**: Generate plots to better understand the data and model performance.
"""

# Iris Flower Classification
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import pandas as pd

# Load dataset
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = pd.Series(iris.target, name="Species")

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=iris.target_names))

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.datasets import load_iris

# Load dataset
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = pd.Series(iris.target, name="Species")

# Combine X and y into a single DataFrame for the pairplot
iris_data = X.copy()  # Copy the features DataFrame
iris_data["Species"] = y  # Add the target variable to the DataFrame

# 1. Pairplot of Features to see relationships
sns.pairplot(iris_data, hue="Species", palette="Set2")
plt.suptitle("Pairplot of Iris Features", fontsize=16)
plt.tight_layout()
plt.show()